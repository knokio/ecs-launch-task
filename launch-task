#!/usr/bin/env bash

## Checks & Inputs
## --------

if [[ -z "${AWS_ACCESS_KEY_ID}" ]]; then
    echo "‚ö†Ô∏è AWS_ACCESS_KEY_ID is not defined, so aws cli might not work"
fi

if [[ -z "${AWS_SECRET_ACCESS_KEY}" ]]; then
    echo "‚ö†Ô∏è AWS_SECRET_ACCESS_KEY is not defined, so aws cli might not work"
fi

if [[ -z "${AWS_DEFAULT_REGION}" ]]; then
    echo "‚ö†Ô∏è AWS_DEFAULT_REGION is not defined, so aws cli might not work"
fi

if [[ $# -le 2 ]] ; then
    echo '‚ùå At least 3 argument are required: <cluster_name> <command>'
    echo 'launch-task <cluster_name> <task_name> <command>'
    exit 1
fi

if ! [ -x "$(command -v ecs-cli)" ]; then
  echo '‚ùå Error: ecs-cli is not installed.'
  echo '‚ÑπÔ∏è  Install in MacOS: brew install amazon-ecs-cli'
  echo 'or more information in https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ECS_CLI_installation.html'
  exit 1
fi

## Setup ENV Vars
## --------

CLUSTER_NAME="${1}"
SERVICE_NAME="${2}"
CMD_ARGUMENT="\"${@:3}\""

CONTAINER_NAME=main

## Get network variables
## --------

readonly ECS_CLUSTER_DATA="$(aws ecs describe-services --cluster ${CLUSTER_NAME} --services ${SERVICE_NAME})" 
readonly ECS_SUBNETS=$(echo $ECS_CLUSTER_DATA | jq -r '.services[].networkConfiguration.awsvpcConfiguration.subnets[]')
readonly ECS_SECURITY_GROUPS=$(echo $ECS_CLUSTER_DATA | jq -r '.services[].networkConfiguration.awsvpcConfiguration.securityGroups[]')

if [ -z "${ECS_SUBNETS}" ] || [ -z "${ECS_SECURITY_GROUPS}" ]; then
    echo '‚ùå Could not extract automatically from ECS the subnets OR security groups from cluster, aborting.'
    exit 1
fi

echo "‚ÑπÔ∏è Cluster: ${CLUSTER_NAME}"
echo "‚ÑπÔ∏è Service: ${SERVICE_NAME}"

## Construct request
## --------

CMD="ecs run ${CLUSTER_NAME} ${SERVICE_NAME} --launchtype FARGATE"

for key in $ECS_SUBNETS; do
    CMD="$CMD --subnet $key"
done

for key in $ECS_SECURITY_GROUPS; do
    CMD="$CMD --securitygroup $key"
done

CMD="$CMD -c ${CONTAINER_NAME} ${CMD_ARGUMENT}"

## Create task
## --------

echo "Executing: ${CMD}"
echo

readonly CMD_CREATE_RESULT=$(eval $CMD)

echo $CMD_CREATE_RESULT

if [[ $CMD_CREATE_RESULT == *"Successfully"* ]]; then
  readonly TASK_ARN=$(echo $CMD_CREATE_RESULT | sed -n 's/.*\(arn:aws:ecs:[^:]*:[^:]*:task\/[^/]*\/[a-z0-9]*\).*/\1/p')
  readonly TASK_ID=$(echo $CMD_CREATE_RESULT | sed -n 's/.*arn:aws:ecs:[^:]*:[^:]*:task\/[^/]*\/\([a-z0-9]*\).*/\1/p')

  echo "‚úÖ ECS Task created"
  echo "Task ARN: ${TASK_ARN}"
  echo "Task ID: ${TASK_ID}"
  echo
else
  echo "‚ùå ECS create task: Could not create"
  echo 
  echo $CMD_CREATE_RESULT
  exit
fi

echo 

## Wait for task to RUNNING
## --------

echo 
echo "Task: https://${AWS_DEFAULT_REGION}.console.aws.amazon.com/ecs/home?region=${AWS_DEFAULT_REGION}#/clusters/${CLUSTER_NAME}/tasks/${TASK_ID}/details"
echo "Cloudwatch logs: https://${AWS_DEFAULT_REGION}.console.aws.amazon.com/cloudwatch/home?region=${AWS_DEFAULT_REGION}#logsV2:log-groups/log-group/${CLUSTER_NAME}/log-events/${TASK_URL_ENCODED}"
echo "Follow logs: ecs-cli logs -c ${CLUSTER_NAME} --task-id ${TASK_ID}"
echo 

readonly CMD_TASK_STATUS="aws ecs describe-tasks --cluster ${CLUSTER_NAME} --tasks ${TASK_ARN}"
LAST_TASK_STATUS_RESULT=""

for index in {1..100}
do
    sleep 2
    TASK_STATUS_RESULT=$(eval $CMD_TASK_STATUS | jq -r ".tasks[].lastStatus")

    case "$TASK_STATUS_RESULT" in

      "PROVISIONING" | "PENDING" | "ACTIVATING")
        [ "$TASK_STATUS_RESULT" = "$LAST_TASK_STATUS_RESULT" ] && echo -n "." || printf "\nüïê Status: ${TASK_STATUS_RESULT}" 
        LAST_TASK_STATUS_RESULT=$TASK_STATUS_RESULT
        ;;
      "RUNNING")
        printf "\n‚úÖ Task Running: showing last lines of logs"
        ecs-cli logs -c ${CLUSTER_NAME} --task-id ${TASK_ID} --since 1 | tail -n 50
        LAST_TASK_STATUS_RESULT=$TASK_STATUS_RESULT
        ;;
      "DEPROVISIONING" | "STOPPING")
        [ "$TASK_STATUS_RESULT" = "$LAST_TASK_STATUS_RESULT" ] && echo -n "." || printf "\n‚ö†Ô∏è Task ${TASK_STATUS_RESULT}: so works done"
        LAST_TASK_STATUS_RESULT=$TASK_STATUS_RESULT
        ;;
      "STOPPED")
        printf "\n‚ö†Ô∏è Task ${TASK_STATUS_RESULT}"
        break
        ;;
      *)
        [ "$TASK_STATUS_RESULT" = "$LAST_TASK_STATUS_RESULT" ] && echo -n "." || printf "\nUnknown status ${TASK_STATUS_RESULT}"
        LAST_TASK_STATUS_RESULT=$TASK_STATUS_RESULT
        ;;
    esac
done 

readonly TASK_FINISHED_STATUS=$(eval $CMD_TASK_STATUS)

readonly TASK_EXIT_CODE=$(echo "$TASK_FINISHED_STATUS" | jq -r ".tasks[].containers[].exitCode")
readonly TASK_EXIT_REASON=$(echo "$TASK_FINISHED_STATUS" | jq -r ".tasks[].containers[].reason")

readonly TASK_URL_ENCODED=$(printf %s "rails/${CLUSTER_NAME}/${TASK_ID}" | jq -s -R -r @uri)

echo

echo
echo "Task details: https://${AWS_DEFAULT_REGION}.console.aws.amazon.com/ecs/home?region=${AWS_DEFAULT_REGION}#/clusters/${CLUSTER_NAME}/tasks/${TASK_ID}/details"
echo
echo "See full logs here: https://${AWS_DEFAULT_REGION}.console.aws.amazon.com/cloudwatch/home?region=${AWS_DEFAULT_REGION}#logsV2:log-groups/log-group/${CLUSTER_NAME}/log-events/${TASK_URL_ENCODED}"
echo
echo "or run:"
echo "ecs-cli logs -c ${CLUSTER_NAME} --task-id ${TASK_ID}"
echo

if [ "$TASK_EXIT_CODE" = "0" ]; then
  echo "‚úÖ‚úÖ‚úÖ Task ${TASK_ID} finished with success"
else
  echo "‚ö†Ô∏è Task ${TASK_ID} finished with exit code ${TASK_EXIT_CODE}"
  echo "- Reason is '${TASK_EXIT_REASON}'"
fi

exit $TASK_EXIT_CODE
