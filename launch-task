#!/usr/bin/env bash

## Checks & Inputs
## --------

if [[ -z "${AWS_ACCESS_KEY_ID}" ]]; then
    echo "‚ö†Ô∏è AWS_ACCESS_KEY_ID is not defined, so aws cli might not work"
fi

if [[ -z "${AWS_SECRET_ACCESS_KEY}" ]]; then
    echo "‚ö†Ô∏è AWS_SECRET_ACCESS_KEY is not defined, so aws cli might not work"
fi

if [[ -z "${AWS_DEFAULT_REGION}" ]]; then
    echo "‚ö†Ô∏è AWS_DEFAULT_REGION is not defined, so aws cli might not work"
fi

if [[ $# -le 1 ]] ; then
    echo '‚ùå At least 2 argument are required: <cluster_name> <command>'
    echo 'launch-task <cluster_name> <command>'
    exit 1
fi

CLUSTER_NAME="${1}"
CMD_ARGUMENT="\"${@:2}\""

CONTAINER_NAME=$CLUSTER_NAME

## Get network variables
## --------

readonly ECS_CLUSTER_DATA="$(aws ecs describe-services --cluster ${CLUSTER_NAME} --services ${CLUSTER_NAME})" 
readonly ECS_SUBNETS=$(echo $ECS_CLUSTER_DATA | jq -r '.services[].networkConfiguration.awsvpcConfiguration.subnets[]')
readonly ECS_SECURITY_GROUPS=$(echo $ECS_CLUSTER_DATA | jq -r '.services[].networkConfiguration.awsvpcConfiguration.securityGroups[]')

if [ -z "${ECS_SUBNETS}" ] || [ -z "${ECS_SECURITY_GROUPS}" ]; then
    echo '‚ùå Could not extract automatically from ECS the subnets OR security groups from cluster, aborting.'
    exit 1
fi

## Construct request
## --------

CMD="ecs run ${CLUSTER_NAME} ${CLUSTER_NAME} --launchtype FARGATE"

for key in $ECS_SUBNETS; do
    CMD="$CMD --subnet $key"
done

for key in $ECS_SECURITY_GROUPS; do
    CMD="$CMD --securitygroup $key"
done

CMD="$CMD -c ${CONTAINER_NAME} ${CMD_ARGUMENT}"

## Create task
## --------

echo "Executing: ${CMD}"
echo

readonly CMD_CREATE_RESULT=$(eval $CMD)
###readonly CMD_CREATE_RESULT="Successfully" ## REMOVE

if [[ $CMD_CREATE_RESULT == *"Successfully"* ]]; then
  readonly TASK_ARN=$(echo $CMD_CREATE_RESULT | sed -n 's/.*\(arn:aws:ecs:[^:]*:[^:]*:task\/[^/]*\/[a-z0-9]*\).*/\1/p')
  ###readonly TASK_ARN="arn:aws:ecs:eu-west-1:722324792899:task/demo-release-rails/eedf6888f3774e218887c365dbad55a3" ## REMOVE
  readonly TASK_ID=$(echo $CMD_CREATE_RESULT | sed -n 's/.*arn:aws:ecs:[^:]*:[^:]*:task\/[^/]*\/\([a-z0-9]*\).*/\1/p')

  echo "‚úÖ ECS Task created (${TASK_ARN})"
  echo
else
  echo "‚ùå ECS create task: Could not create"
  echo 
  echo $CMD_CREATE_RESULT
  exit
fi

echo 

## Wait for task to RUNNING
## --------

echo "üïê Waiting for task to start..."
echo 
echo "Task details: https://${AWS_DEFAULT_REGION}.console.aws.amazon.com/ecs/home?region=${AWS_DEFAULT_REGION}#/clusters/${CLUSTER_NAME}/tasks/${TASK_ID}/details"
echo 

readonly CMD_TASK_STATUS="aws ecs describe-tasks --cluster ${CLUSTER_NAME} --tasks ${TASK_ARN}"

for index in {1..100}
do
    sleep 2
    TASK_STATUS_RESULT=$(eval $CMD_TASK_STATUS | jq -r ".tasks[].lastStatus")

    case "$TASK_STATUS_RESULT" in

      "PROVISIONING" | "PENDING" | "ACTIVATING")
        echo "üïê Status: ${TASK_STATUS_RESULT}"
        ;;
      "RUNNING")
        echo "‚úÖ Task Running: showing last 10 lines of logs"
        ecs-cli logs -c ${CLUSTER_NAME} --task-id ${TASK_ID} --since 1 | tail -n 20
        ;;
      "DEPROVISIONING" | "STOPPING")
        echo "‚ö†Ô∏è Task ${TASK_STATUS_RESULT}: so works done"
        ;;
      "STOPPED")
        echo "‚ö†Ô∏è Task ${TASK_STATUS_RESULT}"
        break
        ;;
      *)
        echo "Unknown status ${TASK_STATUS_RESULT}"
        ;;
    esac
done 

readonly TASK_FINISHED_STATUS=$(eval $CMD_TASK_STATUS)

readonly TASK_EXIT_CODE=$(echo "$TASK_FINISHED_STATUS" | jq -r ".tasks[].containers[].exitCode")
readonly TASK_EXIT_REASON=$(echo "$TASK_FINISHED_STATUS" | jq -r ".tasks[].containers[].reason")

readonly TASK_URL_ENCODED=$(printf %s "rails/${CLUSTER_NAME}/${TASK_ID}" | jq -s -R -r @uri)

echo

if [ "$TASK_EXIT_CODE" -eq "0" ]; then
  echo "‚úÖ‚úÖ‚úÖ Task ${TASK_ID} finished with success (exit code: 0)"
else
  echo "‚ö†Ô∏è Task ${TASK_ID} finished, without exit code 0"
  echo "- Exit code is <${TASK_EXIT_CODE}>"
  echo "- Reason is '${TASK_EXIT_REASON}'"
fi

echo
echo "Task details: https://${AWS_DEFAULT_REGION}.console.aws.amazon.com/ecs/home?region=${AWS_DEFAULT_REGION}#/clusters/${CLUSTER_NAME}/tasks/${TASK_ID}/details"
echo
echo "See full logs here: https://${AWS_DEFAULT_REGION}.console.aws.amazon.com/cloudwatch/home?region=${AWS_DEFAULT_REGION}#logsV2:log-groups/log-group/${CLUSTER_NAME}/log-events/${TASK_URL_ENCODED}"
echo
echo "or run:"
echo "ecs-cli logs -c ${CLUSTER_NAME} --task-id ${TASK_ID}"
echo


